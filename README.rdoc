= Mailboxer

This project is based on the need of a private message system for {ging / social_stream}[https://github.com/ging/social_stream]. Instead of creating our core message system heavily dependent on our development we are trying to implement a generic and potent messaging gem.

It is born from the great, but old, code from {lpsergi / acts_as_messageable}[https://github.com/psergi/acts_as_messageable].

There is a lack of documentaion and it will be solved as soon as the gem is more stable and had proved to be useful integrated with SocialStream.


= Installation

Add to your Gemfile:

  gem 'mailboxer'

Migrations:

  rails g mailboxer:install
  
= Requirements

We are now adding support for sending emails when a Notification or a Message is sent to one o more recipients. So that, we mus assure that Messageable models have some specific methods. This methods are:

  #Returning any kind of indentification you want for the model
    def name
	  ....
	  return name
    end

  #Returning the email address of the model
  def email
    ...
    return email
  end

  #Returning whether an email should be sent for this object (Message or Notification)
  def should_email?(object)
    ...
    return boolean
  end

For now, these methods have to be defined before calling to acts_as_messageable. We are working on a better way of requirement. 

If these methods are not present, and Mailboxer::Exception::NotCompliantModel error will arise.


= Usage

In your model:

  class User < ActiveRecord::Base    
    #Definitions of required methods name, email (both could be just columns on the DB) and should_email?
      
    acts_as_messageable
  end