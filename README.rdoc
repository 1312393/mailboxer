= Mailboxer

This project is based on the need of a private message system for {ging / social_stream}[https://github.com/ging/social_stream]. Instead of creating our core message system heavily dependent on our development we are trying to implement a generic and potent messaging gem.

It is born from the great, but old, code from {lpsergi / acts_as_messageable}[https://github.com/psergi/acts_as_messageable].

There is a lack of documentaion and it will be solved as soon as the gem is more stable and had proved to be useful integrated with SocialStream.


= Installation

Add to your Gemfile:

  gem 'mailboxer'
  
Then run:

  bundle update

Run install script:

  rails g mailboxer:install
  
And don't forget to migrate you database:

  rake db:migrate
  
= Requirements

We are now adding support for sending emails when a Notification or a Message is sent to one o more recipients. So that, we mus assure that Messageable models have some specific methods. This methods are:

  #Returning any kind of indentification you want for the model
  def name
    return "You should add method :name in your Messageable model"
  end

  #Returning the email address of the model
  def email
    return "define_email@on_your.model"
  end

  #Returning whether an email should be sent for this object (Message or Notification)
  def should_email?(object)
    return true
  end

These names are explicit enough to not collide with other methods, but as long as you need to change them you can do it by using mailboxer intializer. Just add or uncomment the following lines:

  #Configures the methods needed by mailboxer
  config.email_method = :email
  config.name_method = :name
  config.should_email_method = :should_email?
  
You may change to whatever you want or need. For example:
  
  config.email_method = :notifications_email
  config.name_method = :display_name
  config.should_email_method = :do_you_want_this_to_be_mailed?
  
Will use the method "notification_email" instead of "email", "display_name" for "name" and "do_you_want_this_to_be_mailed?" for "should_email?" 

Using default or custom method names, if your model doesn't implement them, Mailboxer will use dummy methods not to crash but notify you the missing methods.

= Usage

In your model:

  class User < ActiveRecord::Base      
    acts_as_messageable
  end

You are not limited to User model. You can use Mailboxer in any other model and use it in serveral different models. If you have ducks and cylons in your application and you want to interchange messages as if they where the same, just use act_as_messageable in each one and you will be able to send duck-duck, duck-cylon, cylon-duck and cylon-cylon messages. Of course, you can extend it for as many clases as you need. Example:

  class Duck < ActiveRecord::Base      
    acts_as_messageable
  end

  class Cylon < ActiveRecord::Base      
    acts_as_messageable
  end
